
Lab1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  0000016a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000116  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  0000016a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  0000019c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000028  00000000  00000000  000001dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002753  00000000  00000000  00000204  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000023db  00000000  00000000  00002957  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000385  00000000  00000000  00004d32  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000034  00000000  00000000  000050b8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000119b  00000000  00000000  000050ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000072  00000000  00000000  00006287  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000048  00000000  00000000  000062f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 83 00 	call	0x106	; 0x106 <main>
  b0:	0c 94 89 00 	jmp	0x112	; 0x112 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <move_leds>:
		move_leds();
	}
	return 1;		/* This line is never reached, but prevents compiler warnings because we are returning data */
}

int move_leds(){
  b8:	27 e0       	ldi	r18, 0x07	; 7
  ba:	30 e0       	ldi	r19, 0x00	; 0
  bc:	81 e0       	ldi	r24, 0x01	; 1
	uint8_t i = 0;
	for (i = 1; i < 128; i = i*2)
		{
			PORTA.OUT = ~i;			/* i goes from 1 -> 2 -> 4 etc */
  be:	a0 e0       	ldi	r26, 0x00	; 0
  c0:	b4 e0       	ldi	r27, 0x04	; 4
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  c2:	46 e0       	ldi	r20, 0x06	; 6
  c4:	50 e0       	ldi	r21, 0x00	; 0
  c6:	98 2f       	mov	r25, r24
  c8:	90 95       	com	r25
  ca:	14 96       	adiw	r26, 0x04	; 4
  cc:	9c 93       	st	X, r25
  ce:	14 97       	sbiw	r26, 0x04	; 4
  d0:	fa 01       	movw	r30, r20
  d2:	31 97       	sbiw	r30, 0x01	; 1
  d4:	f1 f7       	brne	.-4      	; 0xd2 <move_leds+0x1a>
	return 1;		/* This line is never reached, but prevents compiler warnings because we are returning data */
}

int move_leds(){
	uint8_t i = 0;
	for (i = 1; i < 128; i = i*2)
  d6:	88 0f       	add	r24, r24
  d8:	21 50       	subi	r18, 0x01	; 1
  da:	31 09       	sbc	r19, r1
  dc:	a1 f7       	brne	.-24     	; 0xc6 <move_leds+0xe>
  de:	27 e0       	ldi	r18, 0x07	; 7
  e0:	30 e0       	ldi	r19, 0x00	; 0
  e2:	80 e8       	ldi	r24, 0x80	; 128
			_delay_loop_2(DELAY_COUNT);
		}
		
		for (i = 128; i > 1; i= i/2)
		{
			PORTA.OUT = ~i;			/* i goes from 128 -> 64 -> 32 etc */
  e4:	a0 e0       	ldi	r26, 0x00	; 0
  e6:	b4 e0       	ldi	r27, 0x04	; 4
  e8:	46 e0       	ldi	r20, 0x06	; 6
  ea:	50 e0       	ldi	r21, 0x00	; 0
  ec:	98 2f       	mov	r25, r24
  ee:	90 95       	com	r25
  f0:	14 96       	adiw	r26, 0x04	; 4
  f2:	9c 93       	st	X, r25
  f4:	14 97       	sbiw	r26, 0x04	; 4
  f6:	fa 01       	movw	r30, r20
  f8:	31 97       	sbiw	r30, 0x01	; 1
  fa:	f1 f7       	brne	.-4      	; 0xf8 <move_leds+0x40>
		{
			PORTA.OUT = ~i;			/* i goes from 1 -> 2 -> 4 etc */
			_delay_loop_2(DELAY_COUNT);
		}
		
		for (i = 128; i > 1; i= i/2)
  fc:	86 95       	lsr	r24
  fe:	21 50       	subi	r18, 0x01	; 1
 100:	31 09       	sbc	r19, r1
 102:	a1 f7       	brne	.-24     	; 0xec <move_leds+0x34>
		{
			PORTA.OUT = ~i;			/* i goes from 128 -> 64 -> 32 etc */
			_delay_loop_2(DELAY_COUNT);
		}
}
 104:	08 95       	ret

00000106 <main>:

int main(void)
{
	
	
	PORTA.DIR = 0b11111111; /* or 0xff;			PA7-PA0 all outputs */
 106:	8f ef       	ldi	r24, 0xFF	; 255
 108:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7f4400>
	
	
	while (1)
	{
		move_leds();
 10c:	0e 94 5c 00 	call	0xb8	; 0xb8 <move_leds>
 110:	fd cf       	rjmp	.-6      	; 0x10c <main+0x6>

00000112 <_exit>:
 112:	f8 94       	cli

00000114 <__stop_program>:
 114:	ff cf       	rjmp	.-2      	; 0x114 <__stop_program>
