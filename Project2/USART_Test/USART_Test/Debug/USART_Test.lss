
USART_Test.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000220  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000194  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  00004194  00000194  00000208  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .comment      00000030  00000000  00000000  00000220  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000250  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000068  00000000  00000000  00000290  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002c5b  00000000  00000000  000002f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024f2  00000000  00000000  00002f53  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000526  00000000  00000000  00005445  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000088  00000000  00000000  0000596c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000013fa  00000000  00000000  000059f4  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000000c1  00000000  00000000  00006dee  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000038  00000000  00000000  00006eaf  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 a5 00 	call	0x14a	; 0x14a <main>
  b0:	0c 94 c8 00 	jmp	0x190	; 0x190 <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <USART3_init>:

 void CLOCK_init (void);
 
void USART3_init(void)
{
	PORTB.DIR &= ~PIN5_bm;		/* this is the RX input */
  b8:	e0 e2       	ldi	r30, 0x20	; 32
  ba:	f4 e0       	ldi	r31, 0x04	; 4
  bc:	80 81       	ld	r24, Z
  be:	8f 7d       	andi	r24, 0xDF	; 223
  c0:	80 83       	st	Z, r24
	PORTB.DIR |= PIN4_bm;		/* this is the TX output */
  c2:	80 81       	ld	r24, Z
  c4:	80 61       	ori	r24, 0x10	; 16
  c6:	80 83       	st	Z, r24
	USART3.BAUD = (uint16_t)USART3_BAUD_RATE(9600);
  c8:	e0 e6       	ldi	r30, 0x60	; 96
  ca:	f8 e0       	ldi	r31, 0x08	; 8
  cc:	8d e8       	ldi	r24, 0x8D	; 141
  ce:	90 e2       	ldi	r25, 0x20	; 32
  d0:	80 87       	std	Z+8, r24	; 0x08
  d2:	91 87       	std	Z+9, r25	; 0x09
	USART3.CTRLB |= (USART_TXEN_bm | USART_RXEN_bm);
  d4:	86 81       	ldd	r24, Z+6	; 0x06
  d6:	80 6c       	ori	r24, 0xC0	; 192
  d8:	86 83       	std	Z+6, r24	; 0x06
	PORTMUX.USARTROUTEA |= PORTMUX_USART3_ALT1_gc;
  da:	e0 ee       	ldi	r30, 0xE0	; 224
  dc:	f5 e0       	ldi	r31, 0x05	; 5
  de:	82 81       	ldd	r24, Z+2	; 0x02
  e0:	80 64       	ori	r24, 0x40	; 64
  e2:	82 83       	std	Z+2, r24	; 0x02
  e4:	08 95       	ret

000000e6 <USART3_sendChar>:
}

void USART3_sendChar(char c)
{
	while (!(USART3.STATUS & USART_DREIF_bm))
  e6:	90 91 64 08 	lds	r25, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7f4864>
  ea:	95 ff       	sbrs	r25, 5
  ec:	fc cf       	rjmp	.-8      	; 0xe6 <USART3_sendChar>
	{
		;
	}
	USART3.TXDATAL = c;
  ee:	80 93 62 08 	sts	0x0862, r24	; 0x800862 <__TEXT_REGION_LENGTH__+0x7f4862>
  f2:	08 95       	ret

000000f4 <USART3_readChar>:
}

uint8_t USART3_readChar()
{
	while (!(USART3.STATUS & USART_RXCIF_bm))
  f4:	80 91 64 08 	lds	r24, 0x0864	; 0x800864 <__TEXT_REGION_LENGTH__+0x7f4864>
  f8:	88 23       	and	r24, r24
  fa:	e4 f7       	brge	.-8      	; 0xf4 <USART3_readChar>
	{
		;
	}
	return USART3.RXDATAL;
  fc:	80 91 60 08 	lds	r24, 0x0860	; 0x800860 <__TEXT_REGION_LENGTH__+0x7f4860>
}
 100:	08 95       	ret

00000102 <USART3_sendString>:

void USART3_sendString(char *str)
{
 102:	0f 93       	push	r16
 104:	1f 93       	push	r17
 106:	cf 93       	push	r28
 108:	df 93       	push	r29
 10a:	8c 01       	movw	r16, r24
	for(size_t i = 0; i < strlen(str); i++)
 10c:	c0 e0       	ldi	r28, 0x00	; 0
 10e:	d0 e0       	ldi	r29, 0x00	; 0
 110:	07 c0       	rjmp	.+14     	; 0x120 <USART3_sendString+0x1e>
	{
		USART3_sendChar(str[i]);
 112:	f8 01       	movw	r30, r16
 114:	ec 0f       	add	r30, r28
 116:	fd 1f       	adc	r31, r29
 118:	80 81       	ld	r24, Z
 11a:	0e 94 73 00 	call	0xe6	; 0xe6 <USART3_sendChar>
	return USART3.RXDATAL;
}

void USART3_sendString(char *str)
{
	for(size_t i = 0; i < strlen(str); i++)
 11e:	21 96       	adiw	r28, 0x01	; 1
 120:	f8 01       	movw	r30, r16
 122:	01 90       	ld	r0, Z+
 124:	00 20       	and	r0, r0
 126:	e9 f7       	brne	.-6      	; 0x122 <USART3_sendString+0x20>
 128:	31 97       	sbiw	r30, 0x01	; 1
 12a:	e0 1b       	sub	r30, r16
 12c:	f1 0b       	sbc	r31, r17
 12e:	ce 17       	cp	r28, r30
 130:	df 07       	cpc	r29, r31
 132:	78 f3       	brcs	.-34     	; 0x112 <USART3_sendString+0x10>
	{
		USART3_sendChar(str[i]);
	}
}
 134:	df 91       	pop	r29
 136:	cf 91       	pop	r28
 138:	1f 91       	pop	r17
 13a:	0f 91       	pop	r16
 13c:	08 95       	ret

0000013e <CLOCK_init>:
}

void CLOCK_init (void)
{
	/* Disable CLK_PER Prescaler */
	ccp_write_io( (void *) &CLKCTRL.MCLKCTRLB , (0 << CLKCTRL_PEN_bp));
 13e:	60 e0       	ldi	r22, 0x00	; 0
 140:	81 e6       	ldi	r24, 0x61	; 97
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	0e 94 c2 00 	call	0x184	; 0x184 <ccp_write_io>
 148:	08 95       	ret

0000014a <main>:
}

int main(void)
{
	char ch;
	CLOCK_init();
 14a:	0e 94 9f 00 	call	0x13e	; 0x13e <CLOCK_init>
	
	USART3_init();
 14e:	0e 94 5c 00 	call	0xb8	; 0xb8 <USART3_init>
	
	while (1)
	{
		ch = USART3_readChar();
 152:	0e 94 7a 00 	call	0xf4	; 0xf4 <USART3_readChar>
		if((ch == 'a') || (ch == 'A'))
 156:	81 36       	cpi	r24, 0x61	; 97
 158:	11 f0       	breq	.+4      	; 0x15e <main+0x14>
 15a:	81 34       	cpi	r24, 0x41	; 65
 15c:	29 f4       	brne	.+10     	; 0x168 <main+0x1e>
		{
			USART3_sendString("Got A!\r\n");
 15e:	84 e9       	ldi	r24, 0x94	; 148
 160:	91 e4       	ldi	r25, 0x41	; 65
 162:	0e 94 81 00 	call	0x102	; 0x102 <USART3_sendString>
 166:	04 c0       	rjmp	.+8      	; 0x170 <main+0x26>
		}
		else
		{
			USART3_sendString("Hello World!\r\n");	
 168:	8d e9       	ldi	r24, 0x9D	; 157
 16a:	91 e4       	ldi	r25, 0x41	; 65
 16c:	0e 94 81 00 	call	0x102	; 0x102 <USART3_sendString>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 170:	2f e7       	ldi	r18, 0x7F	; 127
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	9e e1       	ldi	r25, 0x1E	; 30
 176:	21 50       	subi	r18, 0x01	; 1
 178:	80 40       	sbci	r24, 0x00	; 0
 17a:	90 40       	sbci	r25, 0x00	; 0
 17c:	e1 f7       	brne	.-8      	; 0x176 <main+0x2c>
 17e:	00 c0       	rjmp	.+0      	; 0x180 <main+0x36>
 180:	00 00       	nop
 182:	e7 cf       	rjmp	.-50     	; 0x152 <main+0x8>

00000184 <ccp_write_io>:
 184:	dc 01       	movw	r26, r24
 186:	28 ed       	ldi	r18, 0xD8	; 216
 188:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f4034>
 18c:	6c 93       	st	X, r22
 18e:	08 95       	ret

00000190 <_exit>:
 190:	f8 94       	cli

00000192 <__stop_program>:
 192:	ff cf       	rjmp	.-2      	; 0x192 <__stop_program>
