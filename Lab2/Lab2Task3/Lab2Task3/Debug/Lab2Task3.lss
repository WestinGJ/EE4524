
Lab2Task3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00802800  000002d4  00000348  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000002d4  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000366  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000398  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000003d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002aec  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000247c  00000000  00000000  00002f2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000562  00000000  00000000  000053a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000074  00000000  00000000  0000590c  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000012bf  00000000  00000000  00005980  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000015f  00000000  00000000  00006c3f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00006d9e  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   8:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
   c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  10:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  14:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  18:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  1c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  20:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  24:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  28:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  2c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  30:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  34:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  38:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  3c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  40:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  44:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  48:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  4c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  50:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  54:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  58:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  5c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  60:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  64:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  68:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  6c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  70:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  74:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  78:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  7c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  80:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  84:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  88:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  8c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  90:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  94:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  98:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>
  9c:	0c 94 65 00 	jmp	0xca	; 0xca <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	e4 ed       	ldi	r30, 0xD4	; 212
  b4:	f2 e0       	ldi	r31, 0x02	; 2
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	ae 31       	cpi	r26, 0x1E	; 30
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>
  c2:	0e 94 45 01 	call	0x28a	; 0x28a <main>
  c6:	0c 94 68 01 	jmp	0x2d0	; 0x2d0 <_exit>

000000ca <__bad_interrupt>:
  ca:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ce <CLOCK_init>:


void CLOCK_init (void)
{
	/* Disable CLK_PER Prescaler */
	ccp_write_io( (void *) &CLKCTRL.MCLKCTRLB , (0 << CLKCTRL_PEN_bp));
  ce:	60 e0       	ldi	r22, 0x00	; 0
  d0:	81 e6       	ldi	r24, 0x61	; 97
  d2:	90 e0       	ldi	r25, 0x00	; 0
  d4:	0e 94 62 01 	call	0x2c4	; 0x2c4 <ccp_write_io>
  d8:	08 95       	ret

000000da <PORTS_init>:
void PORTS_init(void)
{
/* This has the same effect as PORTS_init() in Lab2Task2, but uses an array for the LED bits */
	uint8_t i;
	
	for (i = 0; i <= (NUM_LED_BITS-1); i += 1) {
  da:	80 e0       	ldi	r24, 0x00	; 0
  dc:	0f c0       	rjmp	.+30     	; 0xfc <PORTS_init+0x22>
		LED_Array[i].LED_PORT->DIRSET = LED_Array[i].bit_mapping;
  de:	e8 2f       	mov	r30, r24
  e0:	f0 e0       	ldi	r31, 0x00	; 0
  e2:	9f 01       	movw	r18, r30
  e4:	22 0f       	add	r18, r18
  e6:	33 1f       	adc	r19, r19
  e8:	e2 0f       	add	r30, r18
  ea:	f3 1f       	adc	r31, r19
  ec:	e0 50       	subi	r30, 0x00	; 0
  ee:	f8 4d       	sbci	r31, 0xD8	; 216
  f0:	a0 81       	ld	r26, Z
  f2:	b1 81       	ldd	r27, Z+1	; 0x01
  f4:	92 81       	ldd	r25, Z+2	; 0x02
  f6:	11 96       	adiw	r26, 0x01	; 1
  f8:	9c 93       	st	X, r25
void PORTS_init(void)
{
/* This has the same effect as PORTS_init() in Lab2Task2, but uses an array for the LED bits */
	uint8_t i;
	
	for (i = 0; i <= (NUM_LED_BITS-1); i += 1) {
  fa:	8f 5f       	subi	r24, 0xFF	; 255
  fc:	8a 30       	cpi	r24, 0x0A	; 10
  fe:	78 f3       	brcs	.-34     	; 0xde <PORTS_init+0x4>
		LED_Array[i].LED_PORT->DIRSET = LED_Array[i].bit_mapping;
	} 
}
 100:	08 95       	ret

00000102 <move_leds>:

void move_leds(void)
{
	uint8_t i;
	
	for (i = 0; i < (NUM_LED_BITS - 1); i += 1)
 102:	20 e0       	ldi	r18, 0x00	; 0
 104:	49 c0       	rjmp	.+146    	; 0x198 <move_leds+0x96>
	{
		if (i == 0){
 106:	21 11       	cpse	r18, r1
 108:	20 c0       	rjmp	.+64     	; 0x14a <move_leds+0x48>
			LED_Array[i+1].LED_PORT->OUTSET = LED_Array[i+1].bit_mapping;
 10a:	82 2f       	mov	r24, r18
 10c:	90 e0       	ldi	r25, 0x00	; 0
 10e:	ac 01       	movw	r20, r24
 110:	4f 5f       	subi	r20, 0xFF	; 255
 112:	5f 4f       	sbci	r21, 0xFF	; 255
 114:	fa 01       	movw	r30, r20
 116:	ee 0f       	add	r30, r30
 118:	ff 1f       	adc	r31, r31
 11a:	4e 0f       	add	r20, r30
 11c:	5f 1f       	adc	r21, r31
 11e:	fa 01       	movw	r30, r20
 120:	e0 50       	subi	r30, 0x00	; 0
 122:	f8 4d       	sbci	r31, 0xD8	; 216
 124:	a0 81       	ld	r26, Z
 126:	b1 81       	ldd	r27, Z+1	; 0x01
 128:	32 81       	ldd	r19, Z+2	; 0x02
 12a:	15 96       	adiw	r26, 0x05	; 5
 12c:	3c 93       	st	X, r19
			LED_Array[i].LED_PORT->OUTCLR = LED_Array[i].bit_mapping;
 12e:	fc 01       	movw	r30, r24
 130:	ee 0f       	add	r30, r30
 132:	ff 1f       	adc	r31, r31
 134:	8e 0f       	add	r24, r30
 136:	9f 1f       	adc	r25, r31
 138:	fc 01       	movw	r30, r24
 13a:	e0 50       	subi	r30, 0x00	; 0
 13c:	f8 4d       	sbci	r31, 0xD8	; 216
 13e:	a0 81       	ld	r26, Z
 140:	b1 81       	ldd	r27, Z+1	; 0x01
 142:	82 81       	ldd	r24, Z+2	; 0x02
 144:	16 96       	adiw	r26, 0x06	; 6
 146:	8c 93       	st	X, r24
 148:	1d c0       	rjmp	.+58     	; 0x184 <move_leds+0x82>
		}
		else {
			LED_Array[i-1].LED_PORT->OUTSET = LED_Array[i-1].bit_mapping;
 14a:	82 2f       	mov	r24, r18
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	fc 01       	movw	r30, r24
 150:	31 97       	sbiw	r30, 0x01	; 1
 152:	af 01       	movw	r20, r30
 154:	44 0f       	add	r20, r20
 156:	55 1f       	adc	r21, r21
 158:	e4 0f       	add	r30, r20
 15a:	f5 1f       	adc	r31, r21
 15c:	e0 50       	subi	r30, 0x00	; 0
 15e:	f8 4d       	sbci	r31, 0xD8	; 216
 160:	a0 81       	ld	r26, Z
 162:	b1 81       	ldd	r27, Z+1	; 0x01
 164:	32 81       	ldd	r19, Z+2	; 0x02
 166:	15 96       	adiw	r26, 0x05	; 5
 168:	3c 93       	st	X, r19
			LED_Array[i].LED_PORT->OUTCLR = LED_Array[i].bit_mapping;
 16a:	fc 01       	movw	r30, r24
 16c:	ee 0f       	add	r30, r30
 16e:	ff 1f       	adc	r31, r31
 170:	8e 0f       	add	r24, r30
 172:	9f 1f       	adc	r25, r31
 174:	fc 01       	movw	r30, r24
 176:	e0 50       	subi	r30, 0x00	; 0
 178:	f8 4d       	sbci	r31, 0xD8	; 216
 17a:	a0 81       	ld	r26, Z
 17c:	b1 81       	ldd	r27, Z+1	; 0x01
 17e:	82 81       	ldd	r24, Z+2	; 0x02
 180:	16 96       	adiw	r26, 0x06	; 6
 182:	8c 93       	st	X, r24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 184:	3f e1       	ldi	r19, 0x1F	; 31
 186:	81 ea       	ldi	r24, 0xA1	; 161
 188:	97 e0       	ldi	r25, 0x07	; 7
 18a:	31 50       	subi	r19, 0x01	; 1
 18c:	80 40       	sbci	r24, 0x00	; 0
 18e:	90 40       	sbci	r25, 0x00	; 0
 190:	e1 f7       	brne	.-8      	; 0x18a <move_leds+0x88>
 192:	00 c0       	rjmp	.+0      	; 0x194 <move_leds+0x92>
 194:	00 00       	nop

void move_leds(void)
{
	uint8_t i;
	
	for (i = 0; i < (NUM_LED_BITS - 1); i += 1)
 196:	2f 5f       	subi	r18, 0xFF	; 255
 198:	29 30       	cpi	r18, 0x09	; 9
 19a:	08 f4       	brcc	.+2      	; 0x19e <move_leds+0x9c>
 19c:	b4 cf       	rjmp	.-152    	; 0x106 <move_leds+0x4>
 19e:	29 e0       	ldi	r18, 0x09	; 9
 1a0:	49 c0       	rjmp	.+146    	; 0x234 <move_leds+0x132>
		
		_delay_us(DELAY_EIGHTH_SEC);
	}
	for (i = (NUM_LED_BITS - 1); i > 0; i -= 1)
	{
		if (i == (NUM_LED_BITS - 1)){
 1a2:	29 30       	cpi	r18, 0x09	; 9
 1a4:	01 f5       	brne	.+64     	; 0x1e6 <move_leds+0xe4>
			LED_Array[i-1].LED_PORT->OUTSET = LED_Array[i-1].bit_mapping;
 1a6:	82 2f       	mov	r24, r18
 1a8:	90 e0       	ldi	r25, 0x00	; 0
 1aa:	ac 01       	movw	r20, r24
 1ac:	41 50       	subi	r20, 0x01	; 1
 1ae:	51 09       	sbc	r21, r1
 1b0:	fa 01       	movw	r30, r20
 1b2:	ee 0f       	add	r30, r30
 1b4:	ff 1f       	adc	r31, r31
 1b6:	4e 0f       	add	r20, r30
 1b8:	5f 1f       	adc	r21, r31
 1ba:	fa 01       	movw	r30, r20
 1bc:	e0 50       	subi	r30, 0x00	; 0
 1be:	f8 4d       	sbci	r31, 0xD8	; 216
 1c0:	a0 81       	ld	r26, Z
 1c2:	b1 81       	ldd	r27, Z+1	; 0x01
 1c4:	32 81       	ldd	r19, Z+2	; 0x02
 1c6:	15 96       	adiw	r26, 0x05	; 5
 1c8:	3c 93       	st	X, r19
			LED_Array[i].LED_PORT->OUTCLR = LED_Array[i].bit_mapping;
 1ca:	fc 01       	movw	r30, r24
 1cc:	ee 0f       	add	r30, r30
 1ce:	ff 1f       	adc	r31, r31
 1d0:	8e 0f       	add	r24, r30
 1d2:	9f 1f       	adc	r25, r31
 1d4:	fc 01       	movw	r30, r24
 1d6:	e0 50       	subi	r30, 0x00	; 0
 1d8:	f8 4d       	sbci	r31, 0xD8	; 216
 1da:	a0 81       	ld	r26, Z
 1dc:	b1 81       	ldd	r27, Z+1	; 0x01
 1de:	82 81       	ldd	r24, Z+2	; 0x02
 1e0:	16 96       	adiw	r26, 0x06	; 6
 1e2:	8c 93       	st	X, r24
 1e4:	1d c0       	rjmp	.+58     	; 0x220 <move_leds+0x11e>
		}
		else {
			LED_Array[i+1].LED_PORT->OUTSET = LED_Array[i+1].bit_mapping;
 1e6:	82 2f       	mov	r24, r18
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	fc 01       	movw	r30, r24
 1ec:	31 96       	adiw	r30, 0x01	; 1
 1ee:	af 01       	movw	r20, r30
 1f0:	44 0f       	add	r20, r20
 1f2:	55 1f       	adc	r21, r21
 1f4:	e4 0f       	add	r30, r20
 1f6:	f5 1f       	adc	r31, r21
 1f8:	e0 50       	subi	r30, 0x00	; 0
 1fa:	f8 4d       	sbci	r31, 0xD8	; 216
 1fc:	a0 81       	ld	r26, Z
 1fe:	b1 81       	ldd	r27, Z+1	; 0x01
 200:	32 81       	ldd	r19, Z+2	; 0x02
 202:	15 96       	adiw	r26, 0x05	; 5
 204:	3c 93       	st	X, r19
			LED_Array[i].LED_PORT->OUTCLR = LED_Array[i].bit_mapping;
 206:	fc 01       	movw	r30, r24
 208:	ee 0f       	add	r30, r30
 20a:	ff 1f       	adc	r31, r31
 20c:	8e 0f       	add	r24, r30
 20e:	9f 1f       	adc	r25, r31
 210:	fc 01       	movw	r30, r24
 212:	e0 50       	subi	r30, 0x00	; 0
 214:	f8 4d       	sbci	r31, 0xD8	; 216
 216:	a0 81       	ld	r26, Z
 218:	b1 81       	ldd	r27, Z+1	; 0x01
 21a:	82 81       	ldd	r24, Z+2	; 0x02
 21c:	16 96       	adiw	r26, 0x06	; 6
 21e:	8c 93       	st	X, r24
 220:	3f e1       	ldi	r19, 0x1F	; 31
 222:	81 ea       	ldi	r24, 0xA1	; 161
 224:	97 e0       	ldi	r25, 0x07	; 7
 226:	31 50       	subi	r19, 0x01	; 1
 228:	80 40       	sbci	r24, 0x00	; 0
 22a:	90 40       	sbci	r25, 0x00	; 0
 22c:	e1 f7       	brne	.-8      	; 0x226 <move_leds+0x124>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <move_leds+0x12e>
 230:	00 00       	nop
			LED_Array[i].LED_PORT->OUTCLR = LED_Array[i].bit_mapping;
		}
		
		_delay_us(DELAY_EIGHTH_SEC);
	}
	for (i = (NUM_LED_BITS - 1); i > 0; i -= 1)
 232:	21 50       	subi	r18, 0x01	; 1
 234:	21 11       	cpse	r18, r1
 236:	b5 cf       	rjmp	.-150    	; 0x1a2 <move_leds+0xa0>
			LED_Array[i].LED_PORT->OUTCLR = LED_Array[i].bit_mapping;
		}
		
		_delay_us(DELAY_EIGHTH_SEC);
	}
}
 238:	08 95       	ret

0000023a <ClearPorts>:

void ClearPorts() {
	
	uint8_t i;
	
	for (i = 0; i <= (NUM_LED_BITS - 1); i += 1) {
 23a:	80 e0       	ldi	r24, 0x00	; 0
 23c:	0f c0       	rjmp	.+30     	; 0x25c <ClearPorts+0x22>
		LED_Array[i].LED_PORT->OUTSET = LED_Array[i].bit_mapping;
 23e:	e8 2f       	mov	r30, r24
 240:	f0 e0       	ldi	r31, 0x00	; 0
 242:	9f 01       	movw	r18, r30
 244:	22 0f       	add	r18, r18
 246:	33 1f       	adc	r19, r19
 248:	e2 0f       	add	r30, r18
 24a:	f3 1f       	adc	r31, r19
 24c:	e0 50       	subi	r30, 0x00	; 0
 24e:	f8 4d       	sbci	r31, 0xD8	; 216
 250:	a0 81       	ld	r26, Z
 252:	b1 81       	ldd	r27, Z+1	; 0x01
 254:	92 81       	ldd	r25, Z+2	; 0x02
 256:	15 96       	adiw	r26, 0x05	; 5
 258:	9c 93       	st	X, r25

void ClearPorts() {
	
	uint8_t i;
	
	for (i = 0; i <= (NUM_LED_BITS - 1); i += 1) {
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	8a 30       	cpi	r24, 0x0A	; 10
 25e:	78 f3       	brcs	.-34     	; 0x23e <ClearPorts+0x4>
		LED_Array[i].LED_PORT->OUTSET = LED_Array[i].bit_mapping;
	}
}
 260:	08 95       	ret

00000262 <SetPorts>:

void SetPorts() {
	
	uint8_t i;
	
	for (i = 0; i <= (NUM_LED_BITS - 1); i += 1) {
 262:	80 e0       	ldi	r24, 0x00	; 0
 264:	0f c0       	rjmp	.+30     	; 0x284 <SetPorts+0x22>
		LED_Array[i].LED_PORT->OUTCLR = LED_Array[i].bit_mapping;
 266:	e8 2f       	mov	r30, r24
 268:	f0 e0       	ldi	r31, 0x00	; 0
 26a:	9f 01       	movw	r18, r30
 26c:	22 0f       	add	r18, r18
 26e:	33 1f       	adc	r19, r19
 270:	e2 0f       	add	r30, r18
 272:	f3 1f       	adc	r31, r19
 274:	e0 50       	subi	r30, 0x00	; 0
 276:	f8 4d       	sbci	r31, 0xD8	; 216
 278:	a0 81       	ld	r26, Z
 27a:	b1 81       	ldd	r27, Z+1	; 0x01
 27c:	92 81       	ldd	r25, Z+2	; 0x02
 27e:	16 96       	adiw	r26, 0x06	; 6
 280:	9c 93       	st	X, r25

void SetPorts() {
	
	uint8_t i;
	
	for (i = 0; i <= (NUM_LED_BITS - 1); i += 1) {
 282:	8f 5f       	subi	r24, 0xFF	; 255
 284:	8a 30       	cpi	r24, 0x0A	; 10
 286:	78 f3       	brcs	.-34     	; 0x266 <SetPorts+0x4>
		LED_Array[i].LED_PORT->OUTCLR = LED_Array[i].bit_mapping;
	}
}
 288:	08 95       	ret

0000028a <main>:
	} 
}

int main(void)
{
	CLOCK_init();
 28a:	0e 94 67 00 	call	0xce	; 0xce <CLOCK_init>
	
	/* set UNO D0-D7 to all outputs  */
	PORTS_init();
 28e:	0e 94 6d 00 	call	0xda	; 0xda <PORTS_init>
		
	SetPorts();
 292:	0e 94 31 01 	call	0x262	; 0x262 <SetPorts>
 296:	2f ef       	ldi	r18, 0xFF	; 255
 298:	88 e0       	ldi	r24, 0x08	; 8
 29a:	9d e3       	ldi	r25, 0x3D	; 61
 29c:	21 50       	subi	r18, 0x01	; 1
 29e:	80 40       	sbci	r24, 0x00	; 0
 2a0:	90 40       	sbci	r25, 0x00	; 0
 2a2:	e1 f7       	brne	.-8      	; 0x29c <main+0x12>
 2a4:	00 c0       	rjmp	.+0      	; 0x2a6 <main+0x1c>
 2a6:	00 00       	nop
	_delay_us(DELAY_ONE_SEC);
	
	ClearPorts();
 2a8:	0e 94 1d 01 	call	0x23a	; 0x23a <ClearPorts>
 2ac:	2f ef       	ldi	r18, 0xFF	; 255
 2ae:	88 e0       	ldi	r24, 0x08	; 8
 2b0:	9d e3       	ldi	r25, 0x3D	; 61
 2b2:	21 50       	subi	r18, 0x01	; 1
 2b4:	80 40       	sbci	r24, 0x00	; 0
 2b6:	90 40       	sbci	r25, 0x00	; 0
 2b8:	e1 f7       	brne	.-8      	; 0x2b2 <main+0x28>
 2ba:	00 c0       	rjmp	.+0      	; 0x2bc <main+0x32>
 2bc:	00 00       	nop
		
	_delay_us(DELAY_ONE_SEC);
		
	while(1)
	{
		move_leds();
 2be:	0e 94 81 00 	call	0x102	; 0x102 <move_leds>
 2c2:	fd cf       	rjmp	.-6      	; 0x2be <main+0x34>

000002c4 <ccp_write_io>:
 2c4:	dc 01       	movw	r26, r24
 2c6:	28 ed       	ldi	r18, 0xD8	; 216
 2c8:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f4034>
 2cc:	6c 93       	st	X, r22
 2ce:	08 95       	ret

000002d0 <_exit>:
 2d0:	f8 94       	cli

000002d2 <__stop_program>:
 2d2:	ff cf       	rjmp	.-2      	; 0x2d2 <__stop_program>
