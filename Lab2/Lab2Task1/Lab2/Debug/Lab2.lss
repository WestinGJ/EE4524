
Lab2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00802800  00802800  00000384  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000330  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      00000030  00000000  00000000  00000384  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000003b4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000068  00000000  00000000  000003f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002a65  00000000  00000000  00000460  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00002474  00000000  00000000  00002ec5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000615  00000000  00000000  00005339  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  0000008c  00000000  00000000  00005950  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000128d  00000000  00000000  000059dc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000160  00000000  00000000  00006c69  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000038  00000000  00000000  00006dc9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   8:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
   c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  10:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  14:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  18:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  1c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  20:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  24:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  28:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  2c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  30:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  34:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  38:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  3c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  40:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  44:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  48:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  4c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  50:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  54:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  58:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  5c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  60:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  64:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  68:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  6c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  70:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  74:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  78:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  7c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  80:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  84:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  88:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  8c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  90:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  94:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  98:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>
  9c:	0c 94 5a 00 	jmp	0xb4	; 0xb4 <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62
  ac:	0e 94 73 01 	call	0x2e6	; 0x2e6 <main>
  b0:	0c 94 96 01 	jmp	0x32c	; 0x32c <_exit>

000000b4 <__bad_interrupt>:
  b4:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000b8 <CLOCK_init>:
void move_leds(void);

void CLOCK_init (void)
{
	/* Disable CLK_PER Prescaler */
	ccp_write_io( (void *) &CLKCTRL.MCLKCTRLB , (0 << CLKCTRL_PEN_bp));
  b8:	60 e0       	ldi	r22, 0x00	; 0
  ba:	81 e6       	ldi	r24, 0x61	; 97
  bc:	90 e0       	ldi	r25, 0x00	; 0
  be:	0e 94 90 01 	call	0x320	; 0x320 <ccp_write_io>
  c2:	08 95       	ret

000000c4 <PORTS_init>:
}

void PORTS_init(void)
{
	/* set UNO D0-D7 to all outputs  */
	PORTC.DIR = 0b01110000; /* or 0x70;			PC4-UNO D1 (TXD1), PC5-UNO D0 (RXD1), PC6 - UNO D4  */
  c4:	80 e7       	ldi	r24, 0x70	; 112
  c6:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7f4440>
	PORTA.DIR = 0b00000011; /* or 0x03;			PA1-UNO D7, PA0 - UNO D2 */
  ca:	83 e0       	ldi	r24, 0x03	; 3
  cc:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7f4400>
	PORTB.DIR = 0b00000100; /* or 0x04;			PB2 - UNO D5 */
  d0:	84 e0       	ldi	r24, 0x04	; 4
  d2:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7f4420>
	PORTF.DIR = 0b00110000; /* or 0x30;			PF5 - UNO D3, PF4 UNO D6 */
  d6:	80 e3       	ldi	r24, 0x30	; 48
  d8:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__TEXT_REGION_LENGTH__+0x7f44a0>
  dc:	08 95       	ret

000000de <ClearPorts>:
		move_leds();
	}
	return 1;
}

void ClearPorts() {
  de:	cf 93       	push	r28
  e0:	df 93       	push	r29

	PORTC.OUTCLR = 0b00100000;  /* or 0x20;		D0 <- 0 */
  e2:	e0 e4       	ldi	r30, 0x40	; 64
  e4:	f4 e0       	ldi	r31, 0x04	; 4
  e6:	90 e2       	ldi	r25, 0x20	; 32
  e8:	96 83       	std	Z+6, r25	; 0x06
	PORTC.OUTCLR = 0b00010000;  /* or 0x10;		D1 <- 0 */
  ea:	80 e1       	ldi	r24, 0x10	; 16
  ec:	86 83       	std	Z+6, r24	; 0x06
	PORTA.OUTCLR = 0b00000001;  /* or 0x01;		D2 <- 0 */
  ee:	a0 e0       	ldi	r26, 0x00	; 0
  f0:	b4 e0       	ldi	r27, 0x04	; 4
  f2:	21 e0       	ldi	r18, 0x01	; 1
  f4:	16 96       	adiw	r26, 0x06	; 6
  f6:	2c 93       	st	X, r18
  f8:	16 97       	sbiw	r26, 0x06	; 6
	PORTF.OUTCLR = 0b00100000;  /* or 0x20;		D3 <- 0 */
  fa:	c0 ea       	ldi	r28, 0xA0	; 160
  fc:	d4 e0       	ldi	r29, 0x04	; 4
  fe:	9e 83       	std	Y+6, r25	; 0x06
	PORTC.OUTCLR = 0b01000000;  /* or 0x40;		D4 <- 0 */
 100:	90 e4       	ldi	r25, 0x40	; 64
 102:	96 83       	std	Z+6, r25	; 0x06
	PORTB.OUTCLR = 0b00000100;  /* or 0x04;		D5 <- 0 */
 104:	94 e0       	ldi	r25, 0x04	; 4
 106:	90 93 26 04 	sts	0x0426, r25	; 0x800426 <__TEXT_REGION_LENGTH__+0x7f4426>
	PORTF.OUTCLR = 0b00010000;  /* or 0x10;		D6 <- 0 */
 10a:	8e 83       	std	Y+6, r24	; 0x06
	PORTA.OUTCLR = 0b00000010;  /* or 0x02;		D7 <- 0 */
 10c:	82 e0       	ldi	r24, 0x02	; 2
 10e:	16 96       	adiw	r26, 0x06	; 6
 110:	8c 93       	st	X, r24
}
 112:	df 91       	pop	r29
 114:	cf 91       	pop	r28
 116:	08 95       	ret

00000118 <SetPorts>:

void SetPorts() {
 118:	cf 93       	push	r28
 11a:	df 93       	push	r29
	
	PORTC.OUTSET = 0b00100000;  /* or 0x20;		D0 <- 1 */
 11c:	e0 e4       	ldi	r30, 0x40	; 64
 11e:	f4 e0       	ldi	r31, 0x04	; 4
 120:	90 e2       	ldi	r25, 0x20	; 32
 122:	95 83       	std	Z+5, r25	; 0x05
	PORTC.OUTSET = 0b00010000;  /* or 0x10;		D1 <- 1 */
 124:	80 e1       	ldi	r24, 0x10	; 16
 126:	85 83       	std	Z+5, r24	; 0x05
	PORTA.OUTSET = 0b00000001;  /* or 0x01;		D2 <- 1 */
 128:	a0 e0       	ldi	r26, 0x00	; 0
 12a:	b4 e0       	ldi	r27, 0x04	; 4
 12c:	21 e0       	ldi	r18, 0x01	; 1
 12e:	15 96       	adiw	r26, 0x05	; 5
 130:	2c 93       	st	X, r18
 132:	15 97       	sbiw	r26, 0x05	; 5
	PORTF.OUTSET = 0b00100000;  /* or 0x20;		D3 <- 1 */
 134:	c0 ea       	ldi	r28, 0xA0	; 160
 136:	d4 e0       	ldi	r29, 0x04	; 4
 138:	9d 83       	std	Y+5, r25	; 0x05
	PORTC.OUTSET = 0b01000000;  /* or 0x40;		D4 <- 1 */
 13a:	90 e4       	ldi	r25, 0x40	; 64
 13c:	95 83       	std	Z+5, r25	; 0x05
	PORTB.OUTSET = 0b00000100;  /* or 0x04;		D5 <- 1 */
 13e:	94 e0       	ldi	r25, 0x04	; 4
 140:	90 93 25 04 	sts	0x0425, r25	; 0x800425 <__TEXT_REGION_LENGTH__+0x7f4425>
	PORTF.OUTSET = 0b00010000;  /* or 0x10;		D6 <- 1 */
 144:	8d 83       	std	Y+5, r24	; 0x05
	PORTA.OUTSET = 0b00000010;  /* or 0x02;		D7 <- 1 */
 146:	82 e0       	ldi	r24, 0x02	; 2
 148:	15 96       	adiw	r26, 0x05	; 5
 14a:	8c 93       	st	X, r24
}
 14c:	df 91       	pop	r29
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <move_leds>:

void move_leds(void){
	uint8_t i;
	for (i=0; i < 7; i++)
 152:	80 e0       	ldi	r24, 0x00	; 0
 154:	5e c0       	rjmp	.+188    	; 0x212 <move_leds+0xc0>
	{
		if (i == 0) {
 156:	81 11       	cpse	r24, r1
 158:	09 c0       	rjmp	.+18     	; 0x16c <move_leds+0x1a>
			PORTC.OUT = PORTC.OUT & 0b11101111;  /* or 0xef; or ~0x10;		D1 <- 0 */
 15a:	e0 e4       	ldi	r30, 0x40	; 64
 15c:	f4 e0       	ldi	r31, 0x04	; 4
 15e:	94 81       	ldd	r25, Z+4	; 0x04
 160:	9f 7e       	andi	r25, 0xEF	; 239
 162:	94 83       	std	Z+4, r25	; 0x04
			PORTC.OUT = PORTC.OUT | 0b00100000;  /* or 0x20;		D0 <- 1 */
 164:	94 81       	ldd	r25, Z+4	; 0x04
 166:	90 62       	ori	r25, 0x20	; 32
 168:	94 83       	std	Z+4, r25	; 0x04
 16a:	49 c0       	rjmp	.+146    	; 0x1fe <move_leds+0xac>
		}
		else if (i == 1) {
 16c:	81 30       	cpi	r24, 0x01	; 1
 16e:	49 f4       	brne	.+18     	; 0x182 <move_leds+0x30>
			PORTC.OUT = PORTC.OUT & 0b11011111;  /* or 0xdf; or ~0x20;		D0 <- 0 */
 170:	e0 e4       	ldi	r30, 0x40	; 64
 172:	f4 e0       	ldi	r31, 0x04	; 4
 174:	94 81       	ldd	r25, Z+4	; 0x04
 176:	9f 7d       	andi	r25, 0xDF	; 223
 178:	94 83       	std	Z+4, r25	; 0x04
			PORTC.OUT = PORTC.OUT | 0b00010000;  /* or 0x10;		D1 <- 1 */
 17a:	94 81       	ldd	r25, Z+4	; 0x04
 17c:	90 61       	ori	r25, 0x10	; 16
 17e:	94 83       	std	Z+4, r25	; 0x04
 180:	3e c0       	rjmp	.+124    	; 0x1fe <move_leds+0xac>
		}
		else if (i == 2) {
 182:	82 30       	cpi	r24, 0x02	; 2
 184:	59 f4       	brne	.+22     	; 0x19c <move_leds+0x4a>
			PORTC.OUT = PORTC.OUT & 0b11101111;  /* or 0xef; or ~0x10;		D1 <- 0 */
 186:	e0 e4       	ldi	r30, 0x40	; 64
 188:	f4 e0       	ldi	r31, 0x04	; 4
 18a:	94 81       	ldd	r25, Z+4	; 0x04
 18c:	9f 7e       	andi	r25, 0xEF	; 239
 18e:	94 83       	std	Z+4, r25	; 0x04
			PORTA.OUT = PORTA.OUT | 0b00000001;  /* or 0x01;		D2 <- 1 */
 190:	e0 e0       	ldi	r30, 0x00	; 0
 192:	f4 e0       	ldi	r31, 0x04	; 4
 194:	94 81       	ldd	r25, Z+4	; 0x04
 196:	91 60       	ori	r25, 0x01	; 1
 198:	94 83       	std	Z+4, r25	; 0x04
 19a:	31 c0       	rjmp	.+98     	; 0x1fe <move_leds+0xac>
		}
		else if (i == 3) {
 19c:	83 30       	cpi	r24, 0x03	; 3
 19e:	59 f4       	brne	.+22     	; 0x1b6 <move_leds+0x64>
			PORTA.OUT = PORTA.OUT & 011111110;  /* or 0xfe; or ~0x01;		D2 <- 0 */
 1a0:	e0 e0       	ldi	r30, 0x00	; 0
 1a2:	f4 e0       	ldi	r31, 0x04	; 4
 1a4:	94 81       	ldd	r25, Z+4	; 0x04
 1a6:	98 74       	andi	r25, 0x48	; 72
 1a8:	94 83       	std	Z+4, r25	; 0x04
			PORTF.OUT = PORTF.OUT | 0b00100000;  /* or 0x20;		D3 <- 1 */
 1aa:	e0 ea       	ldi	r30, 0xA0	; 160
 1ac:	f4 e0       	ldi	r31, 0x04	; 4
 1ae:	94 81       	ldd	r25, Z+4	; 0x04
 1b0:	90 62       	ori	r25, 0x20	; 32
 1b2:	94 83       	std	Z+4, r25	; 0x04
 1b4:	24 c0       	rjmp	.+72     	; 0x1fe <move_leds+0xac>
		}
		else if (i == 4) {
 1b6:	84 30       	cpi	r24, 0x04	; 4
 1b8:	59 f4       	brne	.+22     	; 0x1d0 <move_leds+0x7e>
			PORTF.OUT = PORTF.OUT & 011011111;  /* 0xdf; or ~0x20;		D3 <- 0 */
 1ba:	e0 ea       	ldi	r30, 0xA0	; 160
 1bc:	f4 e0       	ldi	r31, 0x04	; 4
 1be:	94 81       	ldd	r25, Z+4	; 0x04
 1c0:	99 74       	andi	r25, 0x49	; 73
 1c2:	94 83       	std	Z+4, r25	; 0x04
			PORTC.OUT = PORTC.OUT | 0b01000000;  /* or 0x40;		D4 <- 1 */
 1c4:	e0 e4       	ldi	r30, 0x40	; 64
 1c6:	f4 e0       	ldi	r31, 0x04	; 4
 1c8:	94 81       	ldd	r25, Z+4	; 0x04
 1ca:	90 64       	ori	r25, 0x40	; 64
 1cc:	94 83       	std	Z+4, r25	; 0x04
 1ce:	17 c0       	rjmp	.+46     	; 0x1fe <move_leds+0xac>
		}
		else if (i == 5) {
 1d0:	85 30       	cpi	r24, 0x05	; 5
 1d2:	59 f4       	brne	.+22     	; 0x1ea <move_leds+0x98>
			PORTC.OUT = PORTC.OUT & 0b10111111;  /* 0xbf; or ~0x40;		D4 <- 0 */
 1d4:	e0 e4       	ldi	r30, 0x40	; 64
 1d6:	f4 e0       	ldi	r31, 0x04	; 4
 1d8:	94 81       	ldd	r25, Z+4	; 0x04
 1da:	9f 7b       	andi	r25, 0xBF	; 191
 1dc:	94 83       	std	Z+4, r25	; 0x04
			PORTB.OUT = PORTB.OUT | 0b00000100;  /* or 0x04;		D5 <- 1 */
 1de:	e0 e2       	ldi	r30, 0x20	; 32
 1e0:	f4 e0       	ldi	r31, 0x04	; 4
 1e2:	94 81       	ldd	r25, Z+4	; 0x04
 1e4:	94 60       	ori	r25, 0x04	; 4
 1e6:	94 83       	std	Z+4, r25	; 0x04
 1e8:	0a c0       	rjmp	.+20     	; 0x1fe <move_leds+0xac>
		}
		else {
			PORTB.OUT = PORTB.OUT & 0b11111011;  /* 0xfb or ~0x04;		D5 <- 0 */
 1ea:	e0 e2       	ldi	r30, 0x20	; 32
 1ec:	f4 e0       	ldi	r31, 0x04	; 4
 1ee:	94 81       	ldd	r25, Z+4	; 0x04
 1f0:	9b 7f       	andi	r25, 0xFB	; 251
 1f2:	94 83       	std	Z+4, r25	; 0x04
			PORTF.OUT = PORTF.OUT | 0b00010000;  /* or 0x10;		D6 <- 1 */
 1f4:	e0 ea       	ldi	r30, 0xA0	; 160
 1f6:	f4 e0       	ldi	r31, 0x04	; 4
 1f8:	94 81       	ldd	r25, Z+4	; 0x04
 1fa:	90 61       	ori	r25, 0x10	; 16
 1fc:	94 83       	std	Z+4, r25	; 0x04
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 1fe:	2f e3       	ldi	r18, 0x3F	; 63
 200:	32 e4       	ldi	r19, 0x42	; 66
 202:	9f e0       	ldi	r25, 0x0F	; 15
 204:	21 50       	subi	r18, 0x01	; 1
 206:	30 40       	sbci	r19, 0x00	; 0
 208:	90 40       	sbci	r25, 0x00	; 0
 20a:	e1 f7       	brne	.-8      	; 0x204 <move_leds+0xb2>
 20c:	00 c0       	rjmp	.+0      	; 0x20e <move_leds+0xbc>
 20e:	00 00       	nop
	PORTA.OUTSET = 0b00000010;  /* or 0x02;		D7 <- 1 */
}

void move_leds(void){
	uint8_t i;
	for (i=0; i < 7; i++)
 210:	8f 5f       	subi	r24, 0xFF	; 255
 212:	87 30       	cpi	r24, 0x07	; 7
 214:	08 f4       	brcc	.+2      	; 0x218 <move_leds+0xc6>
 216:	9f cf       	rjmp	.-194    	; 0x156 <move_leds+0x4>
 218:	87 e0       	ldi	r24, 0x07	; 7
 21a:	62 c0       	rjmp	.+196    	; 0x2e0 <move_leds+0x18e>
		
		_delay_us(DELAY_QTR_SEC);
	}
	for (i=7; i > 0; i--)
	{
		if (i == 7){
 21c:	87 30       	cpi	r24, 0x07	; 7
 21e:	59 f4       	brne	.+22     	; 0x236 <move_leds+0xe4>
			PORTF.OUT = PORTF.OUT & 0b11101111;  /* or 0xef or ~0x10;		D6 <- 0 */
 220:	e0 ea       	ldi	r30, 0xA0	; 160
 222:	f4 e0       	ldi	r31, 0x04	; 4
 224:	94 81       	ldd	r25, Z+4	; 0x04
 226:	9f 7e       	andi	r25, 0xEF	; 239
 228:	94 83       	std	Z+4, r25	; 0x04
			PORTA.OUT = PORTA.OUT | 0b00000010;  /* or 0x02;		D7 <- 1 */
 22a:	e0 e0       	ldi	r30, 0x00	; 0
 22c:	f4 e0       	ldi	r31, 0x04	; 4
 22e:	94 81       	ldd	r25, Z+4	; 0x04
 230:	92 60       	ori	r25, 0x02	; 2
 232:	94 83       	std	Z+4, r25	; 0x04
 234:	4b c0       	rjmp	.+150    	; 0x2cc <move_leds+0x17a>
		}
		else if (i == 6) {
 236:	86 30       	cpi	r24, 0x06	; 6
 238:	59 f4       	brne	.+22     	; 0x250 <move_leds+0xfe>
			PORTA.OUT = PORTA.OUT & 0b11111101;  /* or 0xfd; or 0x02;		D7 <- 0 */
 23a:	e0 e0       	ldi	r30, 0x00	; 0
 23c:	f4 e0       	ldi	r31, 0x04	; 4
 23e:	94 81       	ldd	r25, Z+4	; 0x04
 240:	9d 7f       	andi	r25, 0xFD	; 253
 242:	94 83       	std	Z+4, r25	; 0x04
			PORTF.OUT = PORTF.OUT | 0b00010000;  /* or 0x10;		D6 <- 1 */
 244:	e0 ea       	ldi	r30, 0xA0	; 160
 246:	f4 e0       	ldi	r31, 0x04	; 4
 248:	94 81       	ldd	r25, Z+4	; 0x04
 24a:	90 61       	ori	r25, 0x10	; 16
 24c:	94 83       	std	Z+4, r25	; 0x04
 24e:	3e c0       	rjmp	.+124    	; 0x2cc <move_leds+0x17a>
		}
		else if (i == 5) {
 250:	85 30       	cpi	r24, 0x05	; 5
 252:	59 f4       	brne	.+22     	; 0x26a <move_leds+0x118>
			PORTF.OUT = PORTF.OUT & 0b11101111;  /* or 0xef or ~0x10;		D6 <- 0 */
 254:	e0 ea       	ldi	r30, 0xA0	; 160
 256:	f4 e0       	ldi	r31, 0x04	; 4
 258:	94 81       	ldd	r25, Z+4	; 0x04
 25a:	9f 7e       	andi	r25, 0xEF	; 239
 25c:	94 83       	std	Z+4, r25	; 0x04
			PORTB.OUT = PORTB.OUT | 0b00000100;  /* or 0x04;		D5 <- 1 */
 25e:	e0 e2       	ldi	r30, 0x20	; 32
 260:	f4 e0       	ldi	r31, 0x04	; 4
 262:	94 81       	ldd	r25, Z+4	; 0x04
 264:	94 60       	ori	r25, 0x04	; 4
 266:	94 83       	std	Z+4, r25	; 0x04
 268:	31 c0       	rjmp	.+98     	; 0x2cc <move_leds+0x17a>
		}
		else if (i == 4) {
 26a:	84 30       	cpi	r24, 0x04	; 4
 26c:	59 f4       	brne	.+22     	; 0x284 <move_leds+0x132>
			PORTB.OUT = PORTB.OUT & 0b11111011;  /* or 0xfb or ~0x04;		D5 <- 0 */
 26e:	e0 e2       	ldi	r30, 0x20	; 32
 270:	f4 e0       	ldi	r31, 0x04	; 4
 272:	94 81       	ldd	r25, Z+4	; 0x04
 274:	9b 7f       	andi	r25, 0xFB	; 251
 276:	94 83       	std	Z+4, r25	; 0x04
			PORTC.OUT = PORTC.OUT | 0b01000000;  /* or 0x40;		D4 <- 1 */
 278:	e0 e4       	ldi	r30, 0x40	; 64
 27a:	f4 e0       	ldi	r31, 0x04	; 4
 27c:	94 81       	ldd	r25, Z+4	; 0x04
 27e:	90 64       	ori	r25, 0x40	; 64
 280:	94 83       	std	Z+4, r25	; 0x04
 282:	24 c0       	rjmp	.+72     	; 0x2cc <move_leds+0x17a>
		}
		else if (i == 3) {
 284:	83 30       	cpi	r24, 0x03	; 3
 286:	59 f4       	brne	.+22     	; 0x29e <move_leds+0x14c>
			PORTC.OUT = PORTC.OUT & 0b10111111;  /* or 0xbf; or ~0x40;		D4 <- 0 */
 288:	e0 e4       	ldi	r30, 0x40	; 64
 28a:	f4 e0       	ldi	r31, 0x04	; 4
 28c:	94 81       	ldd	r25, Z+4	; 0x04
 28e:	9f 7b       	andi	r25, 0xBF	; 191
 290:	94 83       	std	Z+4, r25	; 0x04
			PORTF.OUT = PORTF.OUT | 0b00100000;  /* or 0x20;		D3 <- 1 */
 292:	e0 ea       	ldi	r30, 0xA0	; 160
 294:	f4 e0       	ldi	r31, 0x04	; 4
 296:	94 81       	ldd	r25, Z+4	; 0x04
 298:	90 62       	ori	r25, 0x20	; 32
 29a:	94 83       	std	Z+4, r25	; 0x04
 29c:	17 c0       	rjmp	.+46     	; 0x2cc <move_leds+0x17a>
		}
		else if (i == 2) {
 29e:	82 30       	cpi	r24, 0x02	; 2
 2a0:	59 f4       	brne	.+22     	; 0x2b8 <move_leds+0x166>
			PORTF.OUT = PORTF.OUT & 0b11011111;  /* or 0xdf; or ~0x20;		D3 <- 0 */
 2a2:	e0 ea       	ldi	r30, 0xA0	; 160
 2a4:	f4 e0       	ldi	r31, 0x04	; 4
 2a6:	94 81       	ldd	r25, Z+4	; 0x04
 2a8:	9f 7d       	andi	r25, 0xDF	; 223
 2aa:	94 83       	std	Z+4, r25	; 0x04
			PORTA.OUT = PORTA.OUT | 0b00000001;  /* or 0x01;		D2 <- 1 */
 2ac:	e0 e0       	ldi	r30, 0x00	; 0
 2ae:	f4 e0       	ldi	r31, 0x04	; 4
 2b0:	94 81       	ldd	r25, Z+4	; 0x04
 2b2:	91 60       	ori	r25, 0x01	; 1
 2b4:	94 83       	std	Z+4, r25	; 0x04
 2b6:	0a c0       	rjmp	.+20     	; 0x2cc <move_leds+0x17a>
		}
		else {
			PORTA.OUT = PORTA.OUT & 0b11111110;  /* or 0xfe; or ~0x01;		D2 <- 0 */
 2b8:	e0 e0       	ldi	r30, 0x00	; 0
 2ba:	f4 e0       	ldi	r31, 0x04	; 4
 2bc:	94 81       	ldd	r25, Z+4	; 0x04
 2be:	9e 7f       	andi	r25, 0xFE	; 254
 2c0:	94 83       	std	Z+4, r25	; 0x04
			PORTC.OUT = PORTC.OUT | 0b00010000;  /* or 0x10;		D1 <- 1 */
 2c2:	e0 e4       	ldi	r30, 0x40	; 64
 2c4:	f4 e0       	ldi	r31, 0x04	; 4
 2c6:	94 81       	ldd	r25, Z+4	; 0x04
 2c8:	90 61       	ori	r25, 0x10	; 16
 2ca:	94 83       	std	Z+4, r25	; 0x04
 2cc:	2f e3       	ldi	r18, 0x3F	; 63
 2ce:	32 e4       	ldi	r19, 0x42	; 66
 2d0:	9f e0       	ldi	r25, 0x0F	; 15
 2d2:	21 50       	subi	r18, 0x01	; 1
 2d4:	30 40       	sbci	r19, 0x00	; 0
 2d6:	90 40       	sbci	r25, 0x00	; 0
 2d8:	e1 f7       	brne	.-8      	; 0x2d2 <move_leds+0x180>
 2da:	00 c0       	rjmp	.+0      	; 0x2dc <move_leds+0x18a>
 2dc:	00 00       	nop
			PORTF.OUT = PORTF.OUT | 0b00010000;  /* or 0x10;		D6 <- 1 */
		}
		
		_delay_us(DELAY_QTR_SEC);
	}
	for (i=7; i > 0; i--)
 2de:	81 50       	subi	r24, 0x01	; 1
 2e0:	81 11       	cpse	r24, r1
 2e2:	9c cf       	rjmp	.-200    	; 0x21c <move_leds+0xca>
			PORTC.OUT = PORTC.OUT | 0b00010000;  /* or 0x10;		D1 <- 1 */
		}
		
		_delay_us(DELAY_QTR_SEC);
	}
}
 2e4:	08 95       	ret

000002e6 <main>:
}


int main(void)
{
	CLOCK_init();
 2e6:	0e 94 5c 00 	call	0xb8	; 0xb8 <CLOCK_init>
	
	/* set UNO D0-D7 to all outputs  */
	PORTS_init();
 2ea:	0e 94 62 00 	call	0xc4	; 0xc4 <PORTS_init>

	SetPorts();
 2ee:	0e 94 8c 00 	call	0x118	; 0x118 <SetPorts>
 2f2:	2f ef       	ldi	r18, 0xFF	; 255
 2f4:	88 e0       	ldi	r24, 0x08	; 8
 2f6:	9d e3       	ldi	r25, 0x3D	; 61
 2f8:	21 50       	subi	r18, 0x01	; 1
 2fa:	80 40       	sbci	r24, 0x00	; 0
 2fc:	90 40       	sbci	r25, 0x00	; 0
 2fe:	e1 f7       	brne	.-8      	; 0x2f8 <main+0x12>
 300:	00 c0       	rjmp	.+0      	; 0x302 <main+0x1c>
 302:	00 00       	nop
	_delay_us(DELAY_ONE_SEC);
	
	ClearPorts();
 304:	0e 94 6f 00 	call	0xde	; 0xde <ClearPorts>
 308:	2f ef       	ldi	r18, 0xFF	; 255
 30a:	88 e0       	ldi	r24, 0x08	; 8
 30c:	9d e3       	ldi	r25, 0x3D	; 61
 30e:	21 50       	subi	r18, 0x01	; 1
 310:	80 40       	sbci	r24, 0x00	; 0
 312:	90 40       	sbci	r25, 0x00	; 0
 314:	e1 f7       	brne	.-8      	; 0x30e <main+0x28>
 316:	00 c0       	rjmp	.+0      	; 0x318 <main+0x32>
 318:	00 00       	nop
	
	_delay_us(DELAY_ONE_SEC);
	
	while(1)
	{
		move_leds();
 31a:	0e 94 a9 00 	call	0x152	; 0x152 <move_leds>
 31e:	fd cf       	rjmp	.-6      	; 0x31a <main+0x34>

00000320 <ccp_write_io>:
 320:	dc 01       	movw	r26, r24
 322:	28 ed       	ldi	r18, 0xD8	; 216
 324:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f4034>
 328:	6c 93       	st	X, r22
 32a:	08 95       	ret

0000032c <_exit>:
 32c:	f8 94       	cli

0000032e <__stop_program>:
 32e:	ff cf       	rjmp	.-2      	; 0x32e <__stop_program>
