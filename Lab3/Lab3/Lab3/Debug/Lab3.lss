
Lab3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000001e  00802800  0000023e  000002d2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000023e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000001  0080281e  0080281e  000002f0  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000002f0  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000320  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000078  00000000  00000000  00000360  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00002cfe  00000000  00000000  000003d8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000024a7  00000000  00000000  000030d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   000004d0  00000000  00000000  0000557d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000000dc  00000000  00000000  00005a50  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000014e5  00000000  00000000  00005b2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000011c  00000000  00000000  00007011  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000048  00000000  00000000  0000712d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 50 00 	jmp	0xa0	; 0xa0 <__ctors_end>
   4:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   8:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
   c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  10:	0c 94 e7 00 	jmp	0x1ce	; 0x1ce <__vector_4>
  14:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  18:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  1c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  20:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  24:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  28:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  2c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  30:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  34:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  38:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  3c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  40:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  44:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  48:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  4c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  50:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  54:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  58:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  5c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  60:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  64:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  68:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  6c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  70:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  74:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  78:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  7c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  80:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  84:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  88:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  8c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  90:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  94:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  98:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>
  9c:	0c 94 6d 00 	jmp	0xda	; 0xda <__bad_interrupt>

000000a0 <__ctors_end>:
  a0:	11 24       	eor	r1, r1
  a2:	1f be       	out	0x3f, r1	; 63
  a4:	cf ef       	ldi	r28, 0xFF	; 255
  a6:	cd bf       	out	0x3d, r28	; 61
  a8:	df e3       	ldi	r29, 0x3F	; 63
  aa:	de bf       	out	0x3e, r29	; 62

000000ac <__do_copy_data>:
  ac:	18 e2       	ldi	r17, 0x28	; 40
  ae:	a0 e0       	ldi	r26, 0x00	; 0
  b0:	b8 e2       	ldi	r27, 0x28	; 40
  b2:	ee e3       	ldi	r30, 0x3E	; 62
  b4:	f2 e0       	ldi	r31, 0x02	; 2
  b6:	02 c0       	rjmp	.+4      	; 0xbc <__do_copy_data+0x10>
  b8:	05 90       	lpm	r0, Z+
  ba:	0d 92       	st	X+, r0
  bc:	ae 31       	cpi	r26, 0x1E	; 30
  be:	b1 07       	cpc	r27, r17
  c0:	d9 f7       	brne	.-10     	; 0xb8 <__do_copy_data+0xc>

000000c2 <__do_clear_bss>:
  c2:	28 e2       	ldi	r18, 0x28	; 40
  c4:	ae e1       	ldi	r26, 0x1E	; 30
  c6:	b8 e2       	ldi	r27, 0x28	; 40
  c8:	01 c0       	rjmp	.+2      	; 0xcc <.do_clear_bss_start>

000000ca <.do_clear_bss_loop>:
  ca:	1d 92       	st	X+, r1

000000cc <.do_clear_bss_start>:
  cc:	af 31       	cpi	r26, 0x1F	; 31
  ce:	b2 07       	cpc	r27, r18
  d0:	e1 f7       	brne	.-8      	; 0xca <.do_clear_bss_loop>
  d2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <main>
  d6:	0c 94 1d 01 	jmp	0x23a	; 0x23a <_exit>

000000da <__bad_interrupt>:
  da:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000de <CLOCK_init>:
void RTC_init(void);

void CLOCK_init (void)
{
	/* Disable CLK_PER Prescaler */
	ccp_write_io( (void *) &CLKCTRL.MCLKCTRLB , (0 << CLKCTRL_PEN_bp));
  de:	60 e0       	ldi	r22, 0x00	; 0
  e0:	81 e6       	ldi	r24, 0x61	; 97
  e2:	90 e0       	ldi	r25, 0x00	; 0
  e4:	0e 94 17 01 	call	0x22e	; 0x22e <ccp_write_io>
  e8:	08 95       	ret

000000ea <RTC_init>:
{
	uint8_t temp1;
	
	/* Initialize 32.768kHz Oscillator: */
	/* Enable 32k ULP oscillator: */
	temp1 = CLKCTRL.OSC32KCTRLA;
  ea:	60 91 78 00 	lds	r22, 0x0078	; 0x800078 <__TEXT_REGION_LENGTH__+0x7f4078>
	temp1 |= CLKCTRL_RUNSTDBY_bm;
  ee:	62 60       	ori	r22, 0x02	; 2
	
	/* Writing to protected register */
	ccp_write_io((void*)&CLKCTRL.OSC32KCTRLA, temp1);
  f0:	88 e7       	ldi	r24, 0x78	; 120
  f2:	90 e0       	ldi	r25, 0x00	; 0
  f4:	0e 94 17 01 	call	0x22e	; 0x22e <ccp_write_io>
	
	while(CLKCTRL.MCLKSTATUS & CLKCTRL_OSC32KS_bm)
  f8:	80 91 63 00 	lds	r24, 0x0063	; 0x800063 <__TEXT_REGION_LENGTH__+0x7f4063>
  fc:	85 fd       	sbrc	r24, 5
  fe:	fc cf       	rjmp	.-8      	; 0xf8 <RTC_init+0xe>
	{
		; /* Wait until OSC32KS becomes 0 */
	}
	
	/* Initialize RTC: */
	while (RTC.STATUS > 0)
 100:	80 91 41 01 	lds	r24, 0x0141	; 0x800141 <__TEXT_REGION_LENGTH__+0x7f4141>
 104:	81 11       	cpse	r24, r1
 106:	fc cf       	rjmp	.-8      	; 0x100 <__EEPROM_REGION_LENGTH__>
	{
		; /* Wait for all register to be synchronized */
	}
	/* 32.768kHz Internal Oscillator (XOSC32K) */
	RTC.CLKSEL = RTC_CLKSEL_INT32K_gc;
 108:	e0 e4       	ldi	r30, 0x40	; 64
 10a:	f1 e0       	ldi	r31, 0x01	; 1
 10c:	17 82       	std	Z+7, r1	; 0x07
	/* Run in debug: enabled */
	
	RTC.DBGCTRL = RTC_DBGRUN_bm;
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	85 83       	std	Z+5, r24	; 0x05
	RTC.PITINTCTRL = RTC_PI_bm; /* Periodic Interrupt: enabled */
 112:	82 8b       	std	Z+18, r24	; 0x12
	RTC.PITCTRLA = RTC_PERIOD_CYC8192_gc | RTC_PITEN_bm; /* RTC Clock Cycles 8192, Enable: enabled */
 114:	81 e6       	ldi	r24, 0x61	; 97
 116:	80 8b       	std	Z+16, r24	; 0x10
 118:	08 95       	ret

0000011a <InitialiseLED_PORT_bits>:
}

void InitialiseLED_PORT_bits()
{
	PORTC.DIR = PIN6_bm | PIN5_bm | PIN4_bm;  /*(1<<6) | (1<<5) | (1<<4); 0x70;*/		/* PC4-UNO D1 (TXD1), PC5-UNO D0 (RXD1), PC6 - UNO D4  */
 11a:	80 e7       	ldi	r24, 0x70	; 112
 11c:	80 93 40 04 	sts	0x0440, r24	; 0x800440 <__TEXT_REGION_LENGTH__+0x7f4440>
	PORTA.DIR = PIN3_bm | PIN2_bm | PIN1_bm | PIN0_bm; /*(1<<1) | (1<<0);   0x0f; */      /* PA1-UNO D7, PA0 - UNO D2, PA2- LED8, PA3 - LED9  */
 120:	8f e0       	ldi	r24, 0x0F	; 15
 122:	80 93 00 04 	sts	0x0400, r24	; 0x800400 <__TEXT_REGION_LENGTH__+0x7f4400>
	PORTB.DIR = PIN2_bm; /*0x04;*/		/* PB2 - UNO D5 */
 126:	84 e0       	ldi	r24, 0x04	; 4
 128:	80 93 20 04 	sts	0x0420, r24	; 0x800420 <__TEXT_REGION_LENGTH__+0x7f4420>
	PORTF.DIR = PIN5_bm | PIN4_bm; /*(1<<5) | (1<<4);   0x30; */		/* PF5 - UNO D3, PF4 UNO D6 */
 12c:	80 e3       	ldi	r24, 0x30	; 48
 12e:	80 93 a0 04 	sts	0x04A0, r24	; 0x8004a0 <__TEXT_REGION_LENGTH__+0x7f44a0>
 132:	08 95       	ret

00000134 <InitialiseButton_PORT_bits>:
	/* Later use PIN6_bm etc */
}

void InitialiseButton_PORT_bits(void)
{
	PORTE.DIRCLR = PIN1_bm;					/* PORTE bit 1 is an input */
 134:	e0 e8       	ldi	r30, 0x80	; 128
 136:	f4 e0       	ldi	r31, 0x04	; 4
 138:	82 e0       	ldi	r24, 0x02	; 2
 13a:	82 83       	std	Z+2, r24	; 0x02
	PORTE.PIN1CTRL = PORT_PULLUPEN_bm;		/* Enable Pull up resistors on PORTE pins 1 & 2 */
 13c:	88 e0       	ldi	r24, 0x08	; 8
 13e:	81 8b       	std	Z+17, r24	; 0x11
 140:	08 95       	ret

00000142 <Set_Clear_Ports>:
/* Function to set or clear all LED port bits, 1 - set, 0 - clear */
void Set_Clear_Ports(uint8_t set) {
	
	uint8_t i;
	
	for (i = 0; i <= 9; i += 1)
 142:	90 e0       	ldi	r25, 0x00	; 0
 144:	20 c0       	rjmp	.+64     	; 0x186 <Set_Clear_Ports+0x44>
	{
		if (set)
 146:	88 23       	and	r24, r24
 148:	79 f0       	breq	.+30     	; 0x168 <Set_Clear_Ports+0x26>
			LED_Array[i].LED_PORT->OUTSET = LED_Array[i].bit_mapping;
 14a:	e9 2f       	mov	r30, r25
 14c:	f0 e0       	ldi	r31, 0x00	; 0
 14e:	9f 01       	movw	r18, r30
 150:	22 0f       	add	r18, r18
 152:	33 1f       	adc	r19, r19
 154:	e2 0f       	add	r30, r18
 156:	f3 1f       	adc	r31, r19
 158:	e0 50       	subi	r30, 0x00	; 0
 15a:	f8 4d       	sbci	r31, 0xD8	; 216
 15c:	a0 81       	ld	r26, Z
 15e:	b1 81       	ldd	r27, Z+1	; 0x01
 160:	22 81       	ldd	r18, Z+2	; 0x02
 162:	15 96       	adiw	r26, 0x05	; 5
 164:	2c 93       	st	X, r18
 166:	0e c0       	rjmp	.+28     	; 0x184 <Set_Clear_Ports+0x42>
		else
			LED_Array[i].LED_PORT->OUTCLR = LED_Array[i].bit_mapping;
 168:	e9 2f       	mov	r30, r25
 16a:	f0 e0       	ldi	r31, 0x00	; 0
 16c:	9f 01       	movw	r18, r30
 16e:	22 0f       	add	r18, r18
 170:	33 1f       	adc	r19, r19
 172:	e2 0f       	add	r30, r18
 174:	f3 1f       	adc	r31, r19
 176:	e0 50       	subi	r30, 0x00	; 0
 178:	f8 4d       	sbci	r31, 0xD8	; 216
 17a:	a0 81       	ld	r26, Z
 17c:	b1 81       	ldd	r27, Z+1	; 0x01
 17e:	22 81       	ldd	r18, Z+2	; 0x02
 180:	16 96       	adiw	r26, 0x06	; 6
 182:	2c 93       	st	X, r18
/* Function to set or clear all LED port bits, 1 - set, 0 - clear */
void Set_Clear_Ports(uint8_t set) {
	
	uint8_t i;
	
	for (i = 0; i <= 9; i += 1)
 184:	9f 5f       	subi	r25, 0xFF	; 255
 186:	9a 30       	cpi	r25, 0x0A	; 10
 188:	f0 f2       	brcs	.-68     	; 0x146 <Set_Clear_Ports+0x4>
		if (set)
			LED_Array[i].LED_PORT->OUTSET = LED_Array[i].bit_mapping;
		else
			LED_Array[i].LED_PORT->OUTCLR = LED_Array[i].bit_mapping;
	}
}
 18a:	08 95       	ret

0000018c <Toggle_Ports>:

void Toggle_Ports(void)
{
	uint8_t i;
	
	for (i = 0; i <= 9; i += 1)
 18c:	80 e0       	ldi	r24, 0x00	; 0
 18e:	0f c0       	rjmp	.+30     	; 0x1ae <Toggle_Ports+0x22>
	{
		LED_Array[i].LED_PORT->OUTTGL = LED_Array[i].bit_mapping;
 190:	e8 2f       	mov	r30, r24
 192:	f0 e0       	ldi	r31, 0x00	; 0
 194:	9f 01       	movw	r18, r30
 196:	22 0f       	add	r18, r18
 198:	33 1f       	adc	r19, r19
 19a:	e2 0f       	add	r30, r18
 19c:	f3 1f       	adc	r31, r19
 19e:	e0 50       	subi	r30, 0x00	; 0
 1a0:	f8 4d       	sbci	r31, 0xD8	; 216
 1a2:	a0 81       	ld	r26, Z
 1a4:	b1 81       	ldd	r27, Z+1	; 0x01
 1a6:	92 81       	ldd	r25, Z+2	; 0x02
 1a8:	17 96       	adiw	r26, 0x07	; 7
 1aa:	9c 93       	st	X, r25

void Toggle_Ports(void)
{
	uint8_t i;
	
	for (i = 0; i <= 9; i += 1)
 1ac:	8f 5f       	subi	r24, 0xFF	; 255
 1ae:	8a 30       	cpi	r24, 0x0A	; 10
 1b0:	78 f3       	brcs	.-34     	; 0x190 <Toggle_Ports+0x4>
	{
		LED_Array[i].LED_PORT->OUTTGL = LED_Array[i].bit_mapping;
	}
}
 1b2:	08 95       	ret

000001b4 <main>:

int main(void)
{
	CLOCK_init();
 1b4:	0e 94 6f 00 	call	0xde	; 0xde <CLOCK_init>
	
	/* set UNO D0-D7 to all outputs, also LED8 and LED9  */
	InitialiseLED_PORT_bits();
 1b8:	0e 94 8d 00 	call	0x11a	; 0x11a <InitialiseLED_PORT_bits>
	/* Initialise Push Button bits and pull up resistors */
	InitialiseButton_PORT_bits();
 1bc:	0e 94 9a 00 	call	0x134	; 0x134 <InitialiseButton_PORT_bits>
	
	Set_Clear_Ports(0);
 1c0:	80 e0       	ldi	r24, 0x00	; 0
 1c2:	0e 94 a1 00 	call	0x142	; 0x142 <Set_Clear_Ports>
	
	RTC_init();
 1c6:	0e 94 75 00 	call	0xea	; 0xea <RTC_init>
	
	sei();
 1ca:	78 94       	sei
 1cc:	ff cf       	rjmp	.-2      	; 0x1cc <main+0x18>

000001ce <__vector_4>:
    {
    }
}

ISR(RTC_PIT_vect)
{
 1ce:	1f 92       	push	r1
 1d0:	0f 92       	push	r0
 1d2:	0f b6       	in	r0, 0x3f	; 63
 1d4:	0f 92       	push	r0
 1d6:	11 24       	eor	r1, r1
 1d8:	2f 93       	push	r18
 1da:	3f 93       	push	r19
 1dc:	4f 93       	push	r20
 1de:	5f 93       	push	r21
 1e0:	6f 93       	push	r22
 1e2:	7f 93       	push	r23
 1e4:	8f 93       	push	r24
 1e6:	9f 93       	push	r25
 1e8:	af 93       	push	r26
 1ea:	bf 93       	push	r27
 1ec:	ef 93       	push	r30
 1ee:	ff 93       	push	r31
	static uint8_t PIT_count;
	/* Clear flag by writing '1': */
	RTC.PITINTFLAGS = RTC_PI_bm;
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	80 93 53 01 	sts	0x0153, r24	; 0x800153 <__TEXT_REGION_LENGTH__+0x7f4153>
	
	if (++PIT_count > 2)
 1f6:	80 91 1e 28 	lds	r24, 0x281E	; 0x80281e <__data_end>
 1fa:	8f 5f       	subi	r24, 0xFF	; 255
 1fc:	80 93 1e 28 	sts	0x281E, r24	; 0x80281e <__data_end>
 200:	83 30       	cpi	r24, 0x03	; 3
 202:	20 f0       	brcs	.+8      	; 0x20c <__vector_4+0x3e>
	{
		PIT_count = 0;
 204:	10 92 1e 28 	sts	0x281E, r1	; 0x80281e <__data_end>
		Toggle_Ports();	
 208:	0e 94 c6 00 	call	0x18c	; 0x18c <Toggle_Ports>
	}
	
}
 20c:	ff 91       	pop	r31
 20e:	ef 91       	pop	r30
 210:	bf 91       	pop	r27
 212:	af 91       	pop	r26
 214:	9f 91       	pop	r25
 216:	8f 91       	pop	r24
 218:	7f 91       	pop	r23
 21a:	6f 91       	pop	r22
 21c:	5f 91       	pop	r21
 21e:	4f 91       	pop	r20
 220:	3f 91       	pop	r19
 222:	2f 91       	pop	r18
 224:	0f 90       	pop	r0
 226:	0f be       	out	0x3f, r0	; 63
 228:	0f 90       	pop	r0
 22a:	1f 90       	pop	r1
 22c:	18 95       	reti

0000022e <ccp_write_io>:
 22e:	dc 01       	movw	r26, r24
 230:	28 ed       	ldi	r18, 0xD8	; 216
 232:	20 93 34 00 	sts	0x0034, r18	; 0x800034 <__TEXT_REGION_LENGTH__+0x7f4034>
 236:	6c 93       	st	X, r22
 238:	08 95       	ret

0000023a <_exit>:
 23a:	f8 94       	cli

0000023c <__stop_program>:
 23c:	ff cf       	rjmp	.-2      	; 0x23c <__stop_program>
